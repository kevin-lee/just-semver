"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[549],{3905:(e,r,a)=>{a.d(r,{Zo:()=>m,kt:()=>c});var n=a(7294);function t(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function s(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?s(Object(a),!0).forEach((function(r){t(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function l(e,r){if(null==e)return{};var a,n,t=function(e,r){if(null==e)return{};var a,n,t={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],r.indexOf(a)>=0||(t[a]=e[a]);return t}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var u=n.createContext({}),i=function(e){var r=n.useContext(u),a=r;return e&&(a="function"==typeof e?e(r):o(o({},r),e)),a},m=function(e){var r=i(e.components);return n.createElement(u.Provider,{value:r},e.children)},v={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var a=e.components,t=e.mdxType,s=e.originalType,u=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=i(a),c=t,d=p["".concat(u,".").concat(c)]||p[c]||v[c]||s;return a?n.createElement(d,o(o({ref:r},m),{},{components:a})):n.createElement(d,o({ref:r},m))}));function c(e,r){var a=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var s=a.length,o=new Array(s);o[0]=p;var l={};for(var u in r)hasOwnProperty.call(r,u)&&(l[u]=r[u]);l.originalType=e,l.mdxType="string"==typeof e?e:t,o[1]=l;for(var i=2;i<s;i++)o[i]=a[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},9365:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>u,contentTitle:()=>o,default:()=>v,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var n=a(7462),t=(a(7294),a(3905));const s={},o="How to Use",l={unversionedId:"how-to-use/how-to-use",id:"how-to-use/how-to-use",title:"How to Use",description:"For now, please do not use any types and methods from the package other than just.semver.",source:"@site/../generated-docs/docs/how-to-use/how-to-use.md",sourceDirName:"how-to-use",slug:"/how-to-use/",permalink:"/docs/how-to-use/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Just SemVer",permalink:"/docs/"}},u={},i=[{value:"<code>SemVer.parse</code>",id:"semverparse",level:2},{value:"<code>SemVer.unsafeParse</code>",id:"semverunsafeparse",level:2},{value:"SemVer with <code>pre-release</code> info",id:"semver-with-pre-release-info",level:2},{value:"SemVer with build <code>meta-info</code>",id:"semver-with-build-meta-info",level:2},{value:"SemVer with <code>pre-release</code> info and build <code>meta-info</code>",id:"semver-with-pre-release-info-and-build-meta-info",level:2},{value:"Compare <code>SamVer</code>",id:"compare-samver",level:2},{value:"Matchers",id:"matchers",level:2}],m={toc:i};function v(e){let{components:r,...a}=e;return(0,t.kt)("wrapper",(0,n.Z)({},m,a,{components:r,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"how-to-use"},"How to Use"),(0,t.kt)("admonition",{title:"NOTE",type:"caution"},(0,t.kt)("p",{parentName:"admonition"},"For now, please do not use any types and methods from the package other than ",(0,t.kt)("inlineCode",{parentName:"p"},"just.semver"),"."),(0,t.kt)("ul",{parentName:"admonition"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"just.semver"),": Fine"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"just.semver.matcher")," or any other ",(0,t.kt)("inlineCode",{parentName:"li"},"just.semver.xxx")," packages: You can use it but not recommended as it's currently experimental."))),(0,t.kt)("h2",{id:"semverparse"},(0,t.kt)("inlineCode",{parentName:"h2"},"SemVer.parse")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import just.semver.SemVer\n\nval v = SemVer.parse("1.0.0")\n// v: Either[just.semver.ParseError, SemVer] = Right(\n//   value = SemVer(\n//     major = Major(value = 1),\n//     minor = Minor(value = 0),\n//     patch = Patch(value = 0),\n//     pre = None,\n//     buildMetadata = None\n//   )\n// )\n\n// To render it to `String`,\nv.map(_.render)\n// res1: Either[just.semver.ParseError, String] = Right(value = "1.0.0")\n\n// Invalid version\nSemVer.parse("a1.0.0")\n// res2: Either[just.semver.ParseError, SemVer] = Left(\n//   value = InvalidVersionStringError(value = "a1.0.0")\n// )\n')),(0,t.kt)("h2",{id:"semverunsafeparse"},(0,t.kt)("inlineCode",{parentName:"h2"},"SemVer.unsafeParse")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import just.semver.SemVer\n\n// parse unsafe - NOT RECOMMENDED!!!\nval v = SemVer.unsafeParse("1.0.0")\n// v: SemVer = SemVer(\n//   major = Major(value = 1),\n//   minor = Minor(value = 0),\n//   patch = Patch(value = 0),\n//   pre = None,\n//   buildMetadata = None\n// )\n\n// to String\nv.render\n// res4: String = "1.0.0"\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'\n// Invalid version\nSemVer.unsafeParse("a1.0.0")\n// java.lang.RuntimeException: Invalid SemVer String. value: a1.0.0\n//  at scala.sys.package$.error(package.scala:27)\n//  at just.semver.SemVer$.unsafeParse(SemVer.scala:127)\n//  at repl.MdocSession$MdocApp3$$anonfun$2.apply(how-to-use.md:42)\n//  at repl.MdocSession$MdocApp3$$anonfun$2.apply(how-to-use.md:42)\n')),(0,t.kt)("h2",{id:"semver-with-pre-release-info"},"SemVer with ",(0,t.kt)("inlineCode",{parentName:"h2"},"pre-release")," info"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import just.semver.SemVer\n\nSemVer.parse("1.0.0-beta1")\n// res6: Either[just.semver.ParseError, SemVer] = Right(\n//   value = SemVer(\n//     major = Major(value = 1),\n//     minor = Minor(value = 0),\n//     patch = Patch(value = 0),\n//     pre = Some(\n//       value = PreRelease(\n//         identifier = List(\n//           Dsv(values = List(Alphabet(value = "beta"), Num(value = "1")))\n//         )\n//       )\n//     ),\n//     buildMetadata = None\n//   )\n// )\n\nval v = SemVer.parse("1.0.0-3.123.9a")\n// v: Either[just.semver.ParseError, SemVer] = Right(\n//   value = SemVer(\n//     major = Major(value = 1),\n//     minor = Minor(value = 0),\n//     patch = Patch(value = 0),\n//     pre = Some(\n//       value = PreRelease(\n//         identifier = List(\n//           Dsv(values = List(Num(value = "3"))),\n//           Dsv(values = List(Num(value = "123"))),\n//           Dsv(values = List(Num(value = "9"), Alphabet(value = "a")))\n//         )\n//       )\n//     ),\n//     buildMetadata = None\n//   )\n// )\n\nv.map(_.render)\n// res7: Either[just.semver.ParseError, String] = Right(\n//   value = "1.0.0-3.123.9a"\n// )\n')),(0,t.kt)("h2",{id:"semver-with-build-meta-info"},"SemVer with build ",(0,t.kt)("inlineCode",{parentName:"h2"},"meta-info")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import just.semver.SemVer\n\nval v = SemVer.parse("1.0.0+100.0.12abc")\n// v: Either[just.semver.ParseError, SemVer] = Right(\n//   value = SemVer(\n//     major = Major(value = 1),\n//     minor = Minor(value = 0),\n//     patch = Patch(value = 0),\n//     pre = None,\n//     buildMetadata = Some(\n//       value = BuildMetaInfo(\n//         identifier = List(\n//           Dsv(values = List(Num(value = "100"))),\n//           Dsv(values = List(Num(value = "0"))),\n//           Dsv(values = List(Num(value = "12"), Alphabet(value = "abc")))\n//         )\n//       )\n//     )\n//   )\n// )\n\nv.map(_.render)\n// res9: Either[just.semver.ParseError, String] = Right(\n//   value = "1.0.0+100.0.12abc"\n// )\n')),(0,t.kt)("h2",{id:"semver-with-pre-release-info-and-build-meta-info"},"SemVer with ",(0,t.kt)("inlineCode",{parentName:"h2"},"pre-release")," info and build ",(0,t.kt)("inlineCode",{parentName:"h2"},"meta-info")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import just.semver.SemVer\n\nSemVer.parse("1.0.0-beta1")\n// res11: Either[just.semver.ParseError, SemVer] = Right(\n//   value = SemVer(\n//     major = Major(value = 1),\n//     minor = Minor(value = 0),\n//     patch = Patch(value = 0),\n//     pre = Some(\n//       value = PreRelease(\n//         identifier = List(\n//           Dsv(values = List(Alphabet(value = "beta"), Num(value = "1")))\n//         )\n//       )\n//     ),\n//     buildMetadata = None\n//   )\n// )\n\nval v = SemVer.parse("1.0.0-3.123.9a+100.0.12abc")\n// v: Either[just.semver.ParseError, SemVer] = Right(\n//   value = SemVer(\n//     major = Major(value = 1),\n//     minor = Minor(value = 0),\n//     patch = Patch(value = 0),\n//     pre = Some(\n//       value = PreRelease(\n//         identifier = List(\n//           Dsv(values = List(Num(value = "3"))),\n//           Dsv(values = List(Num(value = "123"))),\n//           Dsv(values = List(Num(value = "9"), Alphabet(value = "a")))\n//         )\n//       )\n//     ),\n//     buildMetadata = Some(\n//       value = BuildMetaInfo(\n//         identifier = List(\n//           Dsv(values = List(Num(value = "100"))),\n//           Dsv(values = List(Num(value = "0"))),\n//           Dsv(values = List(Num(value = "12"), Alphabet(value = "abc")))\n//         )\n//       )\n//     )\n//   )\n// )\n\nv.map(_.render)\n// res12: Either[just.semver.ParseError, String] = Right(\n//   value = "1.0.0-3.123.9a+100.0.12abc"\n// )\n')),(0,t.kt)("h2",{id:"compare-samver"},"Compare ",(0,t.kt)("inlineCode",{parentName:"h2"},"SamVer")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import just.semver.SemVer\n\nfor {\n a <- SemVer.parse("1.0.0")\n b <- SemVer.parse("1.0.1")\n} yield a < b\n// res14: Either[just.semver.ParseError, Boolean] = Right(value = true)\n\nfor {\n a <- SemVer.parse("1.0.1")\n b <- SemVer.parse("1.0.0")\n} yield a < b\n// res15: Either[just.semver.ParseError, Boolean] = Right(value = false)\n\nfor {\n a <- SemVer.parse("1.0.0")\n b <- SemVer.parse("1.0.1")\n} yield a <= b\n// res16: Either[just.semver.ParseError, Boolean] = Right(value = true)\n\nfor {\n a <- SemVer.parse("1.0.0")\n b <- SemVer.parse("1.0.0")\n} yield a <= b\n// res17: Either[just.semver.ParseError, Boolean] = Right(value = true)\n\nfor {\n a <- SemVer.parse("1.0.0")\n b <- SemVer.parse("1.0.0")\n} yield a == b\n// res18: Either[just.semver.ParseError, Boolean] = Right(value = true)\n\nfor {\n a <- SemVer.parse("1.0.1")\n b <- SemVer.parse("1.0.0")\n} yield a > b\n// res19: Either[just.semver.ParseError, Boolean] = Right(value = true)\n\nfor {\n a <- SemVer.parse("1.0.0")\n b <- SemVer.parse("1.0.1")\n} yield a > b\n// res20: Either[just.semver.ParseError, Boolean] = Right(value = false)\n\nfor {\n a <- SemVer.parse("1.0.0")\n b <- SemVer.parse("1.0.1")\n} yield a >= b\n// res21: Either[just.semver.ParseError, Boolean] = Right(value = false)\n\nfor {\n a <- SemVer.parse("1.0.0")\n b <- SemVer.parse("1.0.0")\n} yield a >= b\n// res22: Either[just.semver.ParseError, Boolean] = Right(value = true)\n\nfor {\n a <- SemVer.parse("1.0.1")\n b <- SemVer.parse("1.0.0")\n} yield a >= b\n// res23: Either[just.semver.ParseError, Boolean] = Right(value = true)\n')),(0,t.kt)("h2",{id:"matchers"},"Matchers"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'SemVer.unsafeParse("1.0.0").unsafeMatches("1.0.0 - 2.0.0")\n// res24: Boolean = true\nSemVer.unsafeParse("1.5.0").unsafeMatches("1.0.0 - 2.0.0")\n// res25: Boolean = true\nSemVer.unsafeParse("2.0.0").unsafeMatches("1.0.0 - 2.0.0")\n// res26: Boolean = true\nSemVer.unsafeParse("0.9.9").unsafeMatches("1.0.0 - 2.0.0")\n// res27: Boolean = false\nSemVer.unsafeParse("2.0.1").unsafeMatches("1.0.0 - 2.0.0")\n// res28: Boolean = false\n\nSemVer.unsafeParse("1.0.0").unsafeMatches(">1.0.0 <2.0.0")\n// res29: Boolean = false\nSemVer.unsafeParse("1.0.0").unsafeMatches(">=1.0.0 <=2.0.0")\n// res30: Boolean = true\nSemVer.unsafeParse("1.5.0").unsafeMatches(">1.0.0 <2.0.0")\n// res31: Boolean = true\nSemVer.unsafeParse("2.0.0").unsafeMatches(">1.0.0 <2.0.0")\n// res32: Boolean = false\nSemVer.unsafeParse("2.0.0").unsafeMatches(">=1.0.0 <=2.0.0")\n// res33: Boolean = true\nSemVer.unsafeParse("0.9.9").unsafeMatches(">=1.0.0 <=2.0.0")\n// res34: Boolean = false\nSemVer.unsafeParse("2.0.1").unsafeMatches(">=1.0.0 <=2.0.0")\n// res35: Boolean = false\n\nSemVer.unsafeParse("1.0.0").unsafeMatches("1.0.0 - 2.0.0 || >3.0.0 <4.0.0")\n// res36: Boolean = true\nSemVer.unsafeParse("2.0.0").unsafeMatches("1.0.0 - 2.0.0 || >3.0.0 <4.0.0")\n// res37: Boolean = true\nSemVer.unsafeParse("3.0.0").unsafeMatches("1.0.0 - 2.0.0 || >3.0.0 <=4.0.0")\n// res38: Boolean = false\nSemVer.unsafeParse("3.0.1").unsafeMatches("1.0.0 - 2.0.0 || >3.0.0 <=4.0.0")\n// res39: Boolean = true\nSemVer.unsafeParse("4.0.0").unsafeMatches("1.0.0 - 2.0.0 || >3.0.0 <=4.0.0")\n// res40: Boolean = true\n')))}v.isMDXComponent=!0}}]);